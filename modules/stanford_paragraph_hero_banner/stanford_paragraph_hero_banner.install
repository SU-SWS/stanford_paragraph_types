<?php

/**
 * @file
 * stanford_paragraph_hero_banner.install
 */

use Drupal\field\Entity\FieldStorageConfig;
use Drupal\Component\Utility\NestedArray;
use Drupal\Core\Serialization\Yaml;

/**
 * Update the variant options for hero banner.
 */
function stanford_paragraph_hero_banner_update_8101() {

  $query = \Drupal::database()->update('paragraph__field_p_hero_banner_tint');
  $query->condition('field_p_hero_banner_tint_value', '0');
  $query->fields([
    'field_p_hero_banner_tint_value' => 'no-tint',
  ]);
  $query->execute();

  $query2 = \Drupal::database()->update('paragraph_revision__field_p_hero_banner_tint');
  $query2->condition('field_p_hero_banner_tint_value', '0');
  $query2->fields([
    'field_p_hero_banner_tint_value' => 'no-tint',
  ]);
  $query2->execute();

  // Update the configuration item in the DB.
  $config = drupal_get_path('module', 'stanford_paragraph_hero_banner') . "/config/install/field.storage.paragraph.field_p_hero_banner_tint.yml";
  $storage_config = Yaml::decode(file_get_contents($config));
  $config_name = "settings.allowed_values";
  $update_value = NestedArray::getValue($storage_config, explode('.', $config_name));
  $configManager = \Drupal::service("config.manager");

  // Get active storage config.
  $config_factory = $configManager->getConfigFactory();
  $config = $config_factory->getEditable("field.storage.paragraph.field_p_hero_banner_tint");
  $config->set($config_name, $update_value);
  $config->save();

  drupal_flush_all_caches();
}

/**
 * Deletes old hero banner fields not in use.
 */
function stanford_paragraph_hero_banner_update_8102() {
  $fields = [
    'paragraph.field_p_banner_card_body_1',
    'paragraph.field_p_banner_card_body_2',
    'paragraph.field_p_banner_card_link_1',
    'paragraph.field_p_banner_card_link_2',
    'paragraph.field_p_banner_card_subtitle_1',
    'paragraph.field_p_banner_card_subtitle_2',
    'paragraph.field_p_banner_card_title_1',
    'paragraph.field_p_banner_card_title_2',
  ];
  foreach ($fields as $field) {
    if ($field = FieldStorageConfig::load($field)) {
      $field->delete();
    }
  }
}
