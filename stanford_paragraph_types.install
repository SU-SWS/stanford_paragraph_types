<?php

/**
 * @file
 * stanford_paragraph_types.install
 */

use Drupal\Core\Config\FileStorage;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\Core\Utility\UpdateException;
use Drupal\Core\Logger\RfcLogLevel;

/**
 * Remove all cta and cta_list paragraph entities.
 */
function stanford_paragraph_types_update_8101() {
  // Delete all cta and cta_list paragraphs.
  entity_delete_multiple('paragraph', \Drupal::entityQuery('paragraph')
    ->condition("type", "stanford_cta")
    ->execute());
  entity_delete_multiple('paragraph', \Drupal::entityQuery('paragraph')
    ->condition("type", "stanford_cta_list")
    ->execute());
}

/**
 * Remove missing paragraph type modules from the DB.
 */
function stanford_paragraph_types_update_8102() {

  $query = \Drupal::database()->delete('key_value');
  $query->condition('name', 'stanford_link_item');
  $query->execute();

  $query = \Drupal::database()->delete('key_value');
  $query->condition('name', 'stanford_paragraph_cta');
  $query->execute();

  $query = \Drupal::database()->delete('key_value');
  $query->condition('name', 'stanford_paragraph_cta_list');
  $query->execute();

  $query = \Drupal::database()->delete('key_value');
  $query->condition('name', 'stanford_paragraph_hero');
  $query->execute();

}

/**
 * Move data from field_p_wysiwyg to field_p_callout_wysiwyg.
 */
function stanford_paragraph_types_update_8103() {
  $old_name = 'field_p_wysiwyg';
  $new_name = 'field_p_callout_wysiwyg';
  $bundle = 'stanford_callout_text';
  $module = 'stanford_paragraph_callout_text';

  if (!_stanford_paragraph_types_rename_field($old_name, $new_name, $bundle, $module)) {
    throw new Exception(t('Unable to update field machine name %old to %new', [
      '%old' => $old_name,
      '%new' => $new_name,
    ]));
  }
}

/**
 * Remove missing paragraph type modules from the DB.
 */
function stanford_paragraph_types_update_8104() {
  // Try again.
  stanford_paragraph_types_update_8102();
}

/**
 * Creates a new field on a paragraph bundle and copy data from old field.
 *
 * @param string $old_name
 *   Old field name, ex: field_my_field.
 * @param string $new_name
 *   New field name, ex: field_my_new_field.
 * @param string $bundle
 *   Paragraph bundle name.
 * @param string $module
 *   Module the paragraph exists in.
 *
 * @return bool
 *   If successful.
 */
function _stanford_paragraph_types_rename_field($old_name, $new_name, $bundle, $module) {
  // Check if field already exists. We don't want to mess with existing fields.
  $field = \Drupal::entityTypeManager()
    ->getStorage('field_config')
    ->load("paragraph.$bundle.$new_name");
  if ($field) {
    throw new UpdateException(t("New field already exists: %name", ["%name" => $new_name]));
  }

  // Import new field config.
  $config_path = drupal_get_path('module', $module) . '/config/install';
  $source = new FileStorage($config_path);

  // Check if the module contains the two config files.
  if (!$source->exists("field.field.paragraph.$bundle.$new_name")) {
    throw new UpdateException(t("Missing config: %s", ["%s" => "field.field.paragraph.$bundle.$new_name"]));
  }

  if (!$source->exists("field.storage.paragraph.$new_name")) {
    throw new UpdateException(t("Missing config: %s", ["%s" => "field.storage.paragraph.$new_name"]));
  }

  /** @var \Drupal\Core\Config\CachedStorage $config_storage */
  $config_storage = \Drupal::service('config.storage');

  // Create the storage and tables.
  if (!$config_storage->read("field.storage.paragraph.$new_name")) {
    $storage = new FieldStorageConfig($source->read("field.storage.paragraph.$new_name"));

    if (!$storage->enforceIsNew()->save()) {
      throw new UpdateException(t("Could not save new field storage table: %s", ["%s" => "field.storage.paragraph.$new_name"]));
    }
    else {
      \Drupal::logger("stanford_paragraph_types")->log(RfcLogLevel::DEBUG, "Saved new field storage: %", ["%s" => "field.storage.paragraph.$new_name"]);
    }
  }

  // Put the field on the paragraph entity.
  $config_storage->write("field.field.paragraph.$bundle.$new_name", $source->read("field.field.paragraph.$bundle.$new_name"));
  // Put the field on the paragraph entity form.
  $config_storage->write("core.entity_form_display.paragraph.$bundle.default", $source->read("core.entity_form_display.paragraph.$bundle.default"));
  // Put the field on the paragraph entity display.
  $config_storage->write("core.entity_view_display.paragraph.$bundle.default", $source->read("core.entity_view_display.paragraph.$bundle.default"));

  // Migrate the data.
  _stanford_paragraph_types_move_field_data($old_name, $new_name, $bundle);

  // Delete old field off bundle.
  $field = \Drupal::entityTypeManager()
    ->getStorage('field_config')
    ->load("paragraph.$bundle.$old_name");

  if ($field) {
    $field->delete();
  }

  return TRUE;
}

/**
 * Moves field data from one table to the new.
 *
 * @param string $old_name
 *   Old field name, ex: field_my_field.
 * @param string $new_name
 *   New field name, ex: field_my_new_field.
 * @param string $bundle
 *   Paragraph bundle name.
 */
function _stanford_paragraph_types_move_field_data($old_name, $new_name, $bundle) {
  $database = \Drupal::database();

  $tables = [
    "paragraph__$old_name" => "paragraph__$new_name",
    "paragraph_revision__$old_name" => "paragraph_revision__$new_name",
  ];

  foreach ($tables as $old_table => $new_table) {
    $schema = $database->schema();

    if (!$schema->tableExists($old_table)) {
      throw new UpdateException(t("Upgrade path cannot complete. Missing old table: %s", ["%s" => $old_table]));
    }

    if (!$schema->tableExists($new_table)) {
      throw new UpdateException(t("Upgrade path cannot complete. Missing new table: %s", ["%s" => $new_table]));
    }

    /** @var \Drupal\Core\Database\Statement $query */
    $query = $database->select($old_table, 'p')
      ->fields('p')
      ->condition('bundle', $bundle)
      ->execute();

    while ($line = $query->fetchAssoc()) {
      $new_line = [];

      // Change key values from old to new name.
      foreach ($line as $key => $data) {
        $new_key = str_replace($old_name, $new_name, $key);
        $new_line[$new_key] = $data;
      }

      $database->insert($new_table)
        ->fields($new_line)
        ->execute();
    }
    $database->delete($old_table)
      ->condition('bundle', $bundle)
      ->execute();
  }
}

/**
 * Reverts all components in a feature.
 *
 * @param string $feature
 *   The machine name of the feature (module).
 */
function _stanford_paragraph_types_revert_feature($feature) {
  /** @var \Drupal\features\FeaturesManagerInterface $manager */
  $manager = \Drupal::service('features.manager');
  /** @var \Drupal\features\Package $feature */
  $feature = $manager->loadPackage($feature, TRUE);
  $components = $feature->getConfigOrig();
  // Determine which config the user wants to import/revert.
  $config_to_create = [];
  foreach ($components as $component) {
    $config_to_create[$component] = '';
  }
  $manager->createConfiguration($config_to_create);
  drupal_flush_all_caches();
}
